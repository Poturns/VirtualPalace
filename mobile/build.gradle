apply plugin: 'com.android.library'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"


        ndk {
            moduleName "shell"
            //cFlags "-std=c++11 -frtti -fexceptions"
            ldLibs "log dl"
            stl "gnustl_static"
            abiFilter "armeabi-v7a"
        }

    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //important!!!! disable automatic ndk-build call
    }

    signingConfigs {
        debug {
            storeFile file(project.getRootDir().getAbsolutePath() + project.property('VirtualPalace.KeyStore'))
            storePassword "virtualpalace"
            keyAlias "virtualpalace"
            keyPassword "virtualpalace"
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            jniDebuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
}

dependencies {
    provided files('libs/unity.jar')
    provided files('libs/google_cardboard.jar')

    compile project(':input')
    compile project(':communication')
    compile project(':openCVLibrary300')

    compile 'com.google.android.gms:play-services-drive:7.8.0'
    compile 'com.google.android.gms:play-services-identity:7.8.0'
    compile('com.google.api-client:google-api-client-android:1.20.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    compile('com.google.apis:google-api-services-drive:v2-rev170-1.20.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    //compile 'com.google.android.gms:play-services-wearable:7.8.0'
    //wearApp project(':wear')
    //compile files('libs/unity.jar')
}

import org.apache.tools.ant.taskdefs.condition.Os

// Project Structure에서 설정한 NDK 경로를 읽어들여 Return합니다.
def getNdkBuildPath() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    def command =  properties.getProperty('ndk.dir')
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        command += "\\ndk-build.cmd"
    } else {
        command += "/ndk-build"
    }

    return command
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
    commandLine getNdkBuildPath(),
            'NDK_DEBUG=1',
            '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
            '-j', Runtime.runtime.availableProcessors(),
            'all'
    /*
            'NDK_PROJECT_PATH=build/intermediates/ndk',
            'NDK_LIBS_OUT=src/main/jniLibs',
            'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
            'NDK_APPLICATION_MK=src/main/jni/Application.mk'
            */
}

//tasks.withType(JavaCompile) {
//    compileTask -> compileTask.dependsOn ndkBuild
//}

task cleanNdk(type: Exec, description: 'Clean native objs and lib') {
    commandLine getNdkBuildPath(), '-C', file('src/main/jni').absolutePath, 'clean'
}

// Gradle의 clean Task를 실행할 떄, cleanNative Task를 실행하도록 설정합니다.
//clean.dependsOn 'cleanNdk'